#!/bin/bash

##
## TODO implement as floyd app --> ./bin/floyd.sh + ./bin/floyd.bat
##

## read .floyd/env
test -e .floyd/env && . .floyd/env

USER=`whoami`

##
##
SOURCE="${BASH_SOURCE[0]}"

while [ -h "$SOURCE" ] ; do SOURCE="$(readlink "$SOURCE")"; done

test "${SOURCE:0:2}" == ".."  && SOURCE=$(dirname ${BASH_SOURCE[0]})/$SOURCE

##
FLOYD_ROOT="$( cd -P "$( dirname "$SOURCE" )"; cd .. && pwd -P )"

##
WORKDIR=$( pwd -P )

test $WORKDIR == $FLOYD_ROOT && _lib=true

##
APPNAME=$(basename $WORKDIR)

##
test $NODE_BINARY || NODE_BINARY=`which node`

CMD="$NODE_BINARY $WORKDIR/.floyd"

NODE_PATH="$WORKDIR:$WORKDIR/node_modules:$FLOYD_ROOT:$FLOYD_ROOT/node_modules"


##
##
if ! [ $_lib ]
then
    if ! [ -x .floyd ] && [ "$1" != "create" ]
    then
        echo -e "\033[0;0;1mFATAL\033[m: \033[0;31m.floyd not found in working directory!\033[m exiting..."
        exit 1
    fi
fi

##
##
##
function check() {
    PID=$(ps ax|grep node|grep -v grep|grep "$CMD"|awk '{print $1}')
    echo $PID
}

##
PID=`check`


##
##
##
function create_app() {

    test $USER == "root" && echo -e "\033[0;0;1mWARNING\033[m: \033[0;31mCreating the app as root is not recomended\033[m"

    if [ $1 ]
    then
        test -x $1 || mkdir $1
        cd $1

    fi

    echo creating .floyd

    test -x .floyd || mkdir .floyd

    if ! [ -x .floyd/logs ]
    then
        mkdir .floyd/tmp
        mkdir .floyd/logs
        touch .floyd/logs/stdout.log
    fi

    test -e .floyd/index.js || echo -e "\nrequire('floyd').init();\n" > .floyd/index.js

}


##
##
##
function start_app() {

    if [ $(check) ]
    then
        echo already running @ pid:$PID

    else
        if [ -x /usr/bin/setsid ]
        then
            SETSID=/usr/bin/setsid
        else
            SETSID=/usr/local/bin/setsid
        fi
        NODE_PATH=$NODE_PATH $SETSID $CMD $@ >> .floyd/logs/stdout.log 2>&1 &
        disown $!

    fi

}


##
##
##
function build_app() {


    test -e $WORKDIR/package.json && npm i

    if ! [ $_lib ]
    then
        test -x .floyd/logs || mkdir -p .floyd/logs ./floyd/tmp
    fi

    for file in $(find $WORKDIR -type f -path '*node_modules' -prune -o -name floyd-build.*)
    do
        dir=$(dirname $file)

        test -x $file || chmod +x $file

        if [ $dir != $WORKDIR ]
        then
            $file ./${dir#$WORKDIR/}
        else
            $file ./
        fi
    done

    test "$1" != "-q" && echo done building $APPNAME

}


##
##
##
function update_app() {

    if [ -e ./package.json ]
    then

        npm update

    fi

    test "$1" != "-q" && echo done updating $APPNAME
}


##
##
##
function cls() {
    tput reset
    clear
}


##
##
##
_format="%-7s%-9s%10s%10s   %s\n"
function show_running() {

    now=$(date -d "00:00" "+%s")

    echo running floyd processes on `date`

    printf "$_format" PID owner started "cpu time" "app path"

    ps aux|grep "/\.floyd"|grep -v grep|awk '{print $2 " " $1 " " $9 " " $10 " " $12}' \
    |sed 's/\/\.floyd//'|(while read line; do
        printf "$_format" $line
    done)

}


##
##
##
log_pid=
loop_pid=

function cleanup() {
    test $log_pid && kill $log_pid > /dev/null 2>&1
    test $loop_pid && stop_refresh_loop
}


##
##
##
loop_delay=5

function stop_refresh_loop() {
    test $loop_pid && kill $loop_pid > /dev/null 2>&1 && wait $loop_pid 2> /dev/null
    loop_pid=
}

function start_refresh_loop() {

    (loops=0; loop=true; while $loop
    do
        loops=`expr $loops + 1`

        if [ $loops -gt 100 ]
        then
            loop=false
            echo "stopped refreshing after `expr $loops - 1` loops"

        else
            cls
            echo "refreshing every $loop_delay seconds"
            show_running
            sleep $loop_delay

        fi


    done) &

    loop_pid=$!
    trap 'cleanup' EXIT

}


##
## TODO: suppress Ctrl-c is killing re[S]tarted processes.
##
function log_viewer() {
    clear


    if ! [ $_lib ]
    then
        show_help

        PID=$(check)
        if [ $PID ]
        then
            echo "floyd - $APPNAME is running @ pid:$PID"
        else
            echo "floyd - $APPNAME is not running"
        fi

        ##
        tail -F -n1 .floyd/logs/stdout.log 2>/dev/null &

        log_pid=$!
        trap 'cleanup' EXIT

    else

        show_help
        show_running

    fi

    ##
    running=true
    while $running
    do

        read -n 1 -s cmd

        case "$cmd" in

            ## unofficial - may be replaced with something usefull

            x)
                running=false
            ;;
            n)
                test -e node_modules && npm list
            ;;

            ## official

            h)
                show_help $@
            ;;
            c)
                cls
            ;;
            u)
                update_app $@
            ;;
            b)
                build_app $@
            ;;
            q)
                running=false
            ;;
            *)

                if ! [ $_lib ]
                then

                    case "$cmd" in
                        d)
                            tail -n500 .floyd/logs/stdout.log
                        ;;
                        s)
                            PID=$(check); if [ $PID ]; then echo "restarting $APPNAME @ pid:$PID"; else echo starting $APPNAME; fi
                            $0 restart >> .floyd/logs/stdout.log 2>&1 &
                        ;;
                        k)
                            PID=$(check); test $PID && echo "killing process @ pid:$PID"
                            $0 stop >> .floyd/logs/stdout.log 2>&1 &
                        ;;
                    esac
                else

                    case "$cmd" in
                        r)
                            show_running
                        ;;
                        L)
                            stop_refresh_loop

                            if [ $loop_delay == 5 ]
                            then
                                loop_delay=1
                            else
                                loop_delay=5
                            fi

                            start_refresh_loop
                        ;;
                        l)

                            if [ $loop_pid ]
                            then
                                stop_refresh_loop
                            else
                                start_refresh_loop
                            fi
                        ;;
                    esac


                fi

            ;;
        esac

    done

}


COFFEECMD=`which coffee`
test -e "$COFFEECMD" || COFFEECMD=$FLOYD_ROOT/node_modules/coffee-script/bin/coffee

if [ -x "$COFFEECMD" ] 
then
    ##
    ## http://patorjk.com/software/taag/#p=display&f=Lean&t=Floyd
    ##
    HELP_BANNER_CODE=$($COFFEECMD -sc << EOFCS

TEMPLATE = """
     _/_/_/_/  _/                            _/
    _/        _/    _/_/    _/    _/    _/_/_/
   _/_/_/    _/  _/    _/  _/    _/  _/    _/
  _/        _/  _/    _/  _/    _/  _/    _/
 _/        _/    _/_/      _/_/_/    _/_/_/
    (c) 2012 Nero Networks    _/
                           _/_/
""".split '\n'

((parts)->

    build = (max, pad, tail='')->

        line = if pad then '   ' else ''

        while (line.length + (parts[0]?.length||0)) < max
            if parts.length
                part = parts.shift().substr 0, max
            else
                part = ''

            while part.length < pad
                part += ' '

            line += part + ' '

        line.substr(0, max) + tail + '\n'

    banner = '                                 '+TEMPLATE[0] + '\n'
    for i in [1..6]
        banner += build 33, 15, TEMPLATE[i]

    banner += '\n'

    while parts.length
        banner +=  build 70

    console.log banner.trimRight()

)(args)

EOFCS
    )
fi


##
##
##
function show_help() {
    echo ""

    if ! [ $_lib ]
    then
        ARGS="['[S]tart', '[H]elp', '[K]ill', '[C]lear', '[B]uild', '[D]ump log', '[U]pdate', '', '', '[Q]uit']"
    else
        ARGS="['[B]uild', '[H]elp', '[U]pdate', '[C]lear', '', '[R]efresh', '', '', '', '[Q]uit']"
    fi

    $NODE_BINARY << EOFJS
        var args = $ARGS;

        $HELP_BANNER_CODE
EOFJS

}


##
##
##
case "$1" in

    create)
        shift
        create_app $@

    ;;

    build)
        shift
        build_app $@
    ;;

    update)
        shift
        update_app $@
    ;;

    start)
        shift
        start_app $@

    ;;

    stop)
        kill $PID > /dev/null 2>&1

    ;;

    running)
        show_running
    ;;

    restart)
        $0 stop

        while kill -0 $PID > /dev/null 2>&1
        do
            sleep .3
        done

        shift

        $0 start $@

    ;;

    *)
        log_viewer $@
    ;;

esac
